name: Kernel CI

on:
  push:
    branches: [ "lineage-20" ]
  pull_request:
    branches: [ "lineage-20" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    - name: Download required packages
      run: |
        sudo apt update
        sudo apt install -y sed xz-utils wget curl build-essential git libssl-dev flex bison bc python2 python-is-python3 device-tree-compiler

    - name: Download toolchain
      run: |
        wget -q "$(curl -s https://raw.githubusercontent.com/XSans0/WeebX-Clang/main/main/link.txt)" -O "weebx-clang.tar.gz"
        rm -rf clang && mkdir clang && tar -xf weebx-clang.tar.gz -C clang && rm -rf weebx-clang.tar.gz

    - name: Add toolchain bin dir to PATH
      run: |
        echo "PATH=$(pwd)/clang/bin:$PATH" >> $GITHUB_ENV

    - name: Add KernelSU
      run: curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s main

    - name: Build config
      run: make -j$(nproc --all) O=out ARCH=arm64 SUBARCH=arm64 DTC_EXT=dtc LD=ld.lld AR=llvm-ar NM=llvm-nm STRIP=llvm-strip OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump READELF=llvm-readelf HOSTCC=clang HOSTCXX=clang++ HOSTAR=llvm-ar HOSTLD=ld.lld LLVM=1 LLVM_IAS=1 CLANG_TRIPLE=aarch64-linux-gnu- CROSS_COMPILE=aarch64-linux-gnu- CC=clang vayu_user_defconfig

    - name: Ignore warnings
      run: echo "KBUILD_CFLAGS += -w" >> Makefile

    - name: Enable ThinLTO (disable Full LTO)
      run: echo "CONFIG_THINLTO=y" >> out/.config

    - name: Build kernel
      run: make -j$(nproc --all) O=out ARCH=arm64 SUBARCH=arm64 DTC_EXT=dtc LD=ld.lld AR=llvm-ar NM=llvm-nm STRIP=llvm-strip OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump READELF=llvm-readelf HOSTCC=clang HOSTCXX=clang++ HOSTAR=llvm-ar HOSTLD=ld.lld LLVM=1 LLVM_IAS=1 CLANG_TRIPLE=aarch64-linux-gnu- CROSS_COMPILE=aarch64-linux-gnu- CC=clang all

    - name: Download libufdt
      run: git clone -q --depth=1 https://android.googlesource.com/platform/system/libufdt

    - name: Download AnyKernel
      run: git clone -q --depth=1 https://github.com/chiteroman/AnyKernel3-vayu.git anykernel

    - name: Copy Image
      run: cp -f out/arch/arm64/boot/Image anykernel/Image

    - name: Copy dtb
      run: find out/arch/arm64/boot/dts/qcom -name 'sm8150*.dtb' -exec cat {} + > anykernel/dtb

    - name: Make AOSP dtbo
      run: python3 libufdt/utils/src/mkdtboimg.py create anykernel/dtbo.img --page_size=4096 out/arch/arm64/boot/dts/qcom/vayu-sm8150-overlay.dtbo

    - name: Upload AOSP kernel
      uses: actions/upload-artifact@v4
      with:
        name: kernel-aosp
        path: 'anykernel/*'
        compression-level: 9

    - name: Modify dtbo for MIUI
      run: |
        sed -i 's/<70>/<695>/g'   arch/arm64/boot/dts/qcom/xiaomi/overlay/common/display/dsi-panel-j20s-36-02-0a-lcd-dsc-vid.dtsi
        sed -i 's/<154>/<1546>/g' arch/arm64/boot/dts/qcom/xiaomi/overlay/common/display/dsi-panel-j20s-36-02-0a-lcd-dsc-vid.dtsi
        sed -i 's/<70>/<695>/g'   arch/arm64/boot/dts/qcom/xiaomi/overlay/common/display/dsi-panel-j20s-42-02-0b-lcd-dsc-vid.dtsi
        sed -i 's/<154>/<1546>/g' arch/arm64/boot/dts/qcom/xiaomi/overlay/common/display/dsi-panel-j20s-42-02-0b-lcd-dsc-vid.dtsi

    - name: Build dtbs (for MIUI)
      run: make -j$(nproc --all) O=out ARCH=arm64 SUBARCH=arm64 DTC_EXT=dtc LD=ld.lld AR=llvm-ar NM=llvm-nm STRIP=llvm-strip OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump READELF=llvm-readelf HOSTCC=clang HOSTCXX=clang++ HOSTAR=llvm-ar HOSTLD=ld.lld LLVM=1 LLVM_IAS=1 CLANG_TRIPLE=aarch64-linux-gnu- CROSS_COMPILE=aarch64-linux-gnu- CC=clang dtbs

    - name: Make MIUI dtbo
      run: |
        rm -rf anykernel/dtbo.img
        python3 libufdt/utils/src/mkdtboimg.py create anykernel/dtbo.img --page_size=4096 out/arch/arm64/boot/dts/qcom/vayu-sm8150-overlay.dtbo

    - name: Upload MIUI kernel
      uses: actions/upload-artifact@v4
      with:
        name: kernel-miui
        path: 'anykernel/*'
        compression-level: 9
